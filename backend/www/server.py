# Copyright 2011 Viewfinder Inc. All Rights Reserved.

"""Viewfinder web application server.

Sets up logging, server command line variables, the list of primary
request handlers.

The "cookie_secret" value in the application settings is a long string
of randomly generated bytes and is used to store a secure cookie with
the user's browser identifying their login credentials for successive
requests to viewfinder after having been authenticated by one of the
authentication schemes allowed.

Run the server via scripts/viewfinder, from top-level directory:

% python scripts/viewfinder

 - StartServer() - configures and starts the server
 - ShutdownServer() - cleanly shuts down the server
"""

__author__ = 'spencer@emailscrubbed.com (Spencer Kimball)'

import logging
import os
import re

from copy import deepcopy
from tornado import gen, httpserver, options, stack_context, web
from viewfinder.backend.base import secrets
from viewfinder.backend.base.environ import ServerEnvironment
from viewfinder.backend.db import metric, db_client
from viewfinder.backend.resources.resources_mgr import ResourcesManager
from viewfinder.backend.storage.object_store import ObjectStore
from viewfinder.backend.storage import file_object_store
from viewfinder.backend.www import base, auth, basic_auth, auth_facebook, auth_google
from viewfinder.backend.www import index, photo_store, service_health, unsubscribe, ping
from viewfinder.backend.www import view, auth_prospective, auth_viewfinder, uimodules, test_hook
from viewfinder.backend.www.admin import admin, db, find_user_id, logs, metrics, otp, user_logs
from viewfinder.backend.www.admin import counters, logs_counters, staging_users, profile
from viewfinder.backend.www.admin.service import AdminServiceHandler
from viewfinder.backend.www.service import ServiceHandler
from viewfinder.backend.www.short_url_base import ShortDomainRedirectHandler
from viewfinder.backend.www.system_users import CreateSystemUsers

SERVER_VERSION = '1.1'

options.define('xheaders', default=True, help='True if server is behind a proxy or load balancer')
options.define('ssl', default=True, help='server provides only SSL encrypted HTTP')
options.define('port', default=8443, help='port to serve HTTP requests')
options.define('insecure_port', default=8080, help='port on which insecure traffic arrives')
options.define('redirect_port', default=443, help='port to which insecure traffic is redirected')
options.define('server_version', default=SERVER_VERSION, help='server version string to disallow old clients')
options.define('enable_xsrf', default=True, help='enable and enforce XSRF protection')
options.define('server_debug', default=False, help='run the server in debug mode (for auto-reload and better error display)')
options.define('testing_path', default=None, help='set the path to the automation ui testing')
options.define('upload_metrics', default=True, help='periodically store collected metrics in the database')


# Handlers common to all servers.
COMMON_HANDLERS = [(r'/healthz', base.HealthzHandler),
                   ]

# Web application handlers shared with tests.
WEBAPP_HANDLERS = [(r'/', index.IndexHandler),
                   (r'/(link|login|register)/google', auth_google.AuthGoogleHandler),
                   (r'/(link|login|register)/facebook', auth_facebook.AuthFacebookHandler),
                   (r'/register/viewfinder', auth_viewfinder.RegisterViewfinderHandler),
                   (r'/login/viewfinder', auth_viewfinder.LoginViewfinderHandler),
                   (r'/login_reset/viewfinder', auth_viewfinder.LoginResetViewfinderHandler),
                   (r'/merge_token/viewfinder', auth_viewfinder.MergeTokenViewfinderHandler),
                   (r'/link/viewfinder', auth_viewfinder.LinkViewfinderHandler),
                   (r'/verify/viewfinder', auth_viewfinder.VerifyViewfinderHandler),
                   (r'/(idm/.*)', auth_viewfinder.VerifyIdMobileHandler),
                   (r'/(idw/.*)', auth_viewfinder.VerifyIdWebHandler),
                   (r'/(pr/.*)', auth_prospective.AuthProspectiveHandler),
                   (r'/episodes/(.*)/photos/(.*)(\..)', photo_store.PhotoStoreHandler),
                   (r'/ping', ping.PingHandler),
                   (r'/service/(.*)', ServiceHandler),
                   (r'/service_health', service_health.ServiceHealthHandler),
                   (r'/unsubscribe', unsubscribe.UnsubscribeHandler),
                   (r'/view', view.ViewHandler),
                   (r'/view_beta', view.ViewBetaHandler),
                   (r'/auth', auth.AuthFormHandler),
                   (r'/logout', auth.LogoutHandler),
                   (r'/app', base.TrackingRedirectHandler, dict(
                    url='https://itunes.apple.com/us/app/viewfinder./id552351851?mt=8',
                     permanent=False)),
                   ]

# Handlers for static web pages.
STATIC_WEB_HANDLERS = [(r'/privacy', base.SimpleTemplateHandler, dict(filename='square_privacy.html')),
                       (r'/terms', base.SimpleTemplateHandler, dict(filename='square_terms.html')),
                       (r'/faq', base.SimpleTemplateHandler, dict(filename='square_faq.html')),
                       (r'/copyright', base.SimpleTemplateHandler, dict(filename='square_copyright.html')),
                       (r'/jobs', base.SimpleTemplateHandler, dict(filename='jobs.html')),
                       (r'/video', base.SimpleTemplateHandler, dict(filename='marketing/homepage.html')),
                       (r'/tour', base.SimpleTemplateHandler, dict(filename='marketing/tour.html')),
                       # Google Webmaster Tools verification.
                       (r'/google141500f6f4f04632.html', base.SimpleTemplateHandler, dict(filename='google141500f6f4f04632.html')),
                       ]

# Handlers for the admin pages.
ADMIN_HANDLERS = [(r'/admin', admin.AdminHandler),
                  (r'/admin/otp', otp.OTPEntryHandler),
                  (r'/admin/db', db.DBHandler),
                  (r'/admin/data', db.DBDataHandler),
                  (r'/admin/find_user_id', find_user_id.FindUserIdHandler),
                  (r'/admin/find_user_id_data', find_user_id.FindUserIdDataHandler),
                  (r'/admin/logs', logs.LogHandler),
                  (r'/admin/metrics', metrics.MetricsHandler),
                  (r'/admin/user_logs', user_logs.UserLogHandler),
                  (r'/admin/user_logs_data', user_logs.UserLogDataHandler),
                  (r'/admin/user_names_data', user_logs.UserNameDataHandler),
                  (r'/admin/staging_users', staging_users.ModifyStagingUserHandler),
                  (r'/admin/staging_names_data', staging_users.ModifyStagingNameDataHandler),
                  (r'/admin/counters', counters.CountersHandler),
                  (r'/admin/counters_data', counters.CountersDataHandler),
                  (r'/admin/logs_counters', logs_counters.LogsCountersHandler),
                  (r'/admin/logs_counters_data', logs_counters.LogsCountersDataHandler),
                  (r'/admin/service/(.*)', AdminServiceHandler),
                  (r'/admin/profile', profile.ProfileHandler),
                  ]

# Handlers for the short domain (used to host ShortURL's).
SHORT_DOMAIN_HANDLERS = [(r'/p(.*)', ShortDomainRedirectHandler, dict(add_prefix='pr/'))]


@gen.coroutine
def StartServer(serve_webapp=True, serve_static_web=True, serve_admin=True):
  """Initialize the datastore and operation manager with the viewfinder schema. This typically
  verifies the schema. If the schema does not yet exist, it is created.

  Defines settings dictionary and sets up main application with list of handlers.
  """
  client = db_client.DBClient.Instance()

  settings = {
    'gzip': True,
    'login_url': '/',
    'admin_login_url': '/admin/otp',
    'domain': options.options.domain,
    'server_version': options.options.server_version,
    'cookie_secret': secrets.GetSecret('cookie_secret'),
    'facebook_api_key': secrets.GetSecret('facebook_api_key'),
    'facebook_secret': secrets.GetSecret('facebook_secret'),
    'google_client_id': secrets.GetSecret('google_client_id'),
    'google_client_secret': secrets.GetSecret('google_client_secret'),
    'google_client_mobile_id': secrets.GetSecret('google_client_mobile_id'),
    'google_client_mobile_secret': secrets.GetSecret('google_client_mobile_secret'),
    'template_path': ResourcesManager.Instance().template_path,
    'ui_modules': uimodules,
    'xsrf_cookies' : options.options.enable_xsrf,
    'debug': options.options.server_debug,
    'static_path': ResourcesManager.Instance().static_path,
    }

  if options.options.log_file_prefix:
    settings['logs_dir'] = os.path.dirname(options.options.log_file_prefix)

  # Configure metrics uploading.
  if options.options.upload_metrics:
    for interval in metric.METRIC_INTERVALS:
      metric.Metric.StartMetricUpload(client, metric.DEFAULT_CLUSTER_NAME, interval)

  # Setup application and SSL HTTP server.
  handlers = deepcopy(COMMON_HANDLERS)
  if serve_webapp:
    # Configure web application handlers.
    webapp_handlers = deepcopy(WEBAPP_HANDLERS)

    # Initialize the file object store if specified.
    obj_store = ObjectStore.GetInstance(ObjectStore.PHOTO)
    settings['obj_store'] = obj_store
    if options.options.fileobjstore:
      for store_name, content_type in ((ObjectStore.PHOTO, r'image/jpeg'),
                                       (ObjectStore.USER_LOG, r'text/plain'),
                                       (ObjectStore.USER_ZIPS, r'application/zip')):
        webapp_handlers.append((r'/fileobjstore/%s/(.*)' % store_name,
                                file_object_store.FileObjectStoreHandler,
                                { 'storename': store_name, 'contenttype': content_type}))

    if ServerEnvironment.IsDevBox():
      webapp_handlers.append((r'/(link|login|register)/fakeviewfinder', auth_viewfinder.FakeAuthViewfinderHandler))
      # Set the testing directories.
      if options.options.testing_path is not None:
        webapp_handlers.append((r'/testing/hook/(.*)', test_hook.TestHookHandler))
        webapp_handlers.append((r'/testing/static/(.*)',
                                web.StaticFileHandler,
                                {'path': '%s' % options.options.testing_path}))

    handlers.extend(webapp_handlers)

  if serve_static_web:
    # Configure static web handlers.
    static_web_handlers = deepcopy(STATIC_WEB_HANDLERS)
    handlers.extend(static_web_handlers)

  if serve_admin:
    # Configure and verify admin handlers.
    admin_handlers = deepcopy(ADMIN_HANDLERS)
    for path, handler in admin_handlers:
      if not issubclass(handler, basic_auth.BasicAuthHandler):
        raise TypeError('Administration handlers must '
                        'subclass BasicAuthHandler')
    handlers.extend(admin_handlers)

  # Catch-all handler for 404 pages.
  handlers.extend([(r'/.*', base.PageNotFoundHandler)])

  # Create application and separately add handlers for the short domain and the 
  # regular domain. 
  # 
  # Note that, although the short-domain handlers are added after the initial construction
  # of the Application, those routes will take priority over the routes in the handlers 
  # array.
  application = web.Application(handlers, **settings)
  application.add_handlers(re.escape(options.options.short_domain), SHORT_DOMAIN_HANDLERS)

  # Start the HTTP server.
  http_server = httpserver.HTTPServer(
    application, xheaders=options.options.xheaders,
    ssl_options={
      'certfile': secrets.GetSecretFile('%s.crt' % settings['domain']),
      'keyfile': secrets.GetSecretFile('%s.key' % settings['domain']),
      } if options.options.ssl else None)
  with stack_context.NullContext():
    http_server.listen(options.options.port)

  # Setup redirect server for HTTP -> HTTPS.
  if options.options.ssl:
    http_settings = {
      'host': ServerEnvironment.GetHost(),
      'redirect_port': options.options.redirect_port,
      'xheaders': options.options.xheaders,
      }

    redirect_handlers = [
      (r'/(.*)', index.RedirectHandler),
      ]
    redirect_server = httpserver.HTTPServer(web.Application(
      redirect_handlers, **http_settings))
    with stack_context.NullContext():
      redirect_server.listen(options.options.insecure_port)

  # Ensure that system users have been created if running with a local db (needs server to be running).
  if options.options.localdb:
    yield CreateSystemUsers(client)

  # Run the server until it hits an exception or stop signal.
  yield gen.Task(lambda callback: None)


@gen.coroutine
def ShutdownServer():
  """Server-specific shutdown steps."""
  pass
